Z:\bmcdo020\Desktop\CEG3136\Lab2\keyPad.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Mon Oct 16 14:49:22 2017

    1:                                 ;----------------------------------------------------------------------
    2:                                 ; File: Keypad.asm
    3:                                 ; Author:
    4:                                 
    5:                                 ; Description:
    6:                                 ;  This contains the code for reading the
    7:                                 ;  16-key keypad attached to Port A
    8:                                 ;  See the schematic of the connection in the
    9:                                 ;  design document.
   10:                                 ;
   11:                                 ;  The following subroutines are provided by the module
   12:                                 ;
   13:                                 ; char pollReadKey(): to poll keypad for a keypress
   14:                                 ;                 Checks keypad for 2 ms for a keypress, and
   15:                                 ;                 returns NOKEY if no keypress is found, otherwise
   16:                                 ;                 the value returned will correspond to the
   17:                                 ;                 ASCII code for the key, i.e. 0-9, *, # and A-D
   18:                                 ; void initkey(): Initialises Port A for the keypad
   19:                                 ;
   20:                                 ; char readKey(): to read the key on the keypad
   21:                                 ;                 The value returned will correspond to the
   22:                                 ;                 ASCII code for the key, i.e. 0-9, *, # and A-D
   23:                                 ;---------------------------------------------------------------------
   24:                                 
   25:                                 ; Include header files
   26:                                  include "sections.inc"
    1:                                 ;--------------------------------------
    2:                                 ; File: sections.inc
    3:                                 ; Description: Defines the sections for the project.
    4:                                 ;              Note the use of the symbol SECTIONS_DEFINED
    5:                                 ;              for conditional assembly into modules.
    6:                                 ;----------------------------------------
    7:                                 
    8:                                         IFNDEF SECTIONS_DEFINED  ; Start of conditional assembly
    9:          =00000001              SECTIONS_DEFINED   EQU  1        ; prevents future inclusion of the file
   10:                                 
   11:                                 ; Define addresses of various sections
   12:          =00003000              VARIABLES EQU $3000   ; $3000 - $3FFF
   13:          =00002000              PROGRAM   EQU $2000  ; $2000 - $2FFF
   14:          =00002000              STACK     EQU $2000  ; $1000 - $1FFF
   15:                                 
   16:                                 ;----------------------------------------
   17:                                 ; Global Variable section
   18:                                 ; Use the DS - define storage directive
   19:                                 ;              to define space for 
   20:                                 ;              global variables and data
   21:                                 ;              structures.
   22:                                 ;----------------------------------------
   23:                                 globalVar SECTION
   24:          =00003000                      ORG VARIABLES   ; places section in RAM
   25:                                 ;-----------------------------------------
   26:                                 ; Code section
   27:                                 ; Enter assembly instructions (HCS12) to create
   28:                                 ; executable code.
   29:                                 ;-----------------------------------------
   30:                                 code_section SECTION
   31:          =00002000                      ORG PROGRAM  ; places section in RAM - simulates ROM
   32:                                 
   33:                                 ;------------------------------------------
   34:                                 ; Global constants
   35:                                 ; In simple programs (single module) global constants are 
   36:                                 ; simply placed at the end of code and not section is
   37:                                 ; explicitly defined.
   38:                                 ;--------------------------------------------
   39:                                 globalConst SECTION
sections.inc(40): Error A2038: col(13) 'endcode': undefined symbol
   40:                                         ORG ENDCODE ;--ENDCODE is defined on the second pass of the assembler
   41:                                 
   42:                                 ;----------------------------------------------
   43:                                 ; Defining the start of the globalConst Section
   44:                                 ; The following should be added to the end of the 
   45:                                 ; main module
   46:                                 ;----------------------------------------------
   47:                                 ;       SWITCH code_section 
   48:                                 ;ENDCODE        
   49:                                 
   50:                                          ENDIF  ; End of conditional assembly
   27:                                  include "reg9s12.inc"  ; Defines EQU's for Peripheral Ports
    1:                                 *
    2:                                 *
    3:                                 *  HC12 i/o register locations (9s12dp256)
    4:                                 *
    5:                                 
    6:                                         ifndef REG9S12  ; include only if not yet included
    7:                                 
    8:          =00000001              REG9S12 EQU 1   ; for testing inclusion of this file
    9:                                 *
   10:          =00000000              Porta:          equ 0   ;port a = address lines a8 - a15
   11:          =00000001              Portb:          equ 1   ;port b = address lines a0 - a7
   12:          =00000002              Ddra:           equ 2   ;port a direction register
   13:          =00000003              Ddrb:           equ 3   ;port a direction register
   14:                                 
   15:          =00000008              Porte:          equ 8   ;port e = mode,irqandcontrolsignals
   16:          =00000009              Ddre:           equ 9   ;port e direction register
   17:          =0000000A              Pear:           equ $a  ;port e assignments
   18:          =0000000B              Mode:           equ $b  ;mode register
   19:          =0000000C              Pucr:           equ $c  ;port pull-up control register
   20:          =0000000D              Rdriv:          equ $d  ;port reduced drive control register
   21:          =0000000E              Ebictl:         equ $e  ;e stretch control
   22:                                 
   23:          =00000010              Initrm:         equ $10 ;ram location register
   24:          =00000011              Initrg:         equ $11 ;register location register
   25:          =00000012              Initee:         equ $12 ;eeprom location register
   26:          =00000013              Misc:           equ $13 ;miscellaneous mapping control
   27:          =00000014              Mtst0:          equ $14 ; reserved
   28:          =00000015              Itcr:           equ $15 ;interrupt test control register
   29:          =00000016              Itest:          equ $16 ;interrupt test register
   30:          =00000017              Mtst1:          equ $17 ; reserved
   31:                                 
   32:          =0000001A              Partidh:                equ $1a ;part id high
   33:          =0000001B              Partidl:                equ $1b ;part id low
   34:          =0000001C              Memsiz0:                equ $1c ;memory size
   35:          =0000001D              Memsiz1:                equ $1d ;memory size
   36:          =0000001E              Intcr:          equ $1e ;interrupt control register
   37:          =0000001F              Hprio:          equ $1f ;high priority reg
   38:                                 
   39:          =00000028              Bkpct0:         equ $28 ;break control register
   40:          =00000029              Bkpct1:         equ $29 ;break control register
   41:          =0000002A              Bkp0x:          equ $2a ; break 0 index register
   42:          =0000002B              Bkp0h:          equ $2b ; break 0 pointer high
   43:          =0000002C              Brp0l:          equ $2c ; break 0 pointer low
   44:          =0000002D              Bkp1x:          equ $2d ; break 1 index register
   45:          =0000002E              Bkp1h:          equ $2e ; break 1 pointer high
   46:          =0000002F              Brp1l:          equ $2f ; break 1 pointer low
   47:          =00000030              Ppage:          equ $30 ;program page register
   48:                                 
   49:          =00000032              Portk:          equ $32 ;port k data
   50:          =00000033              Ddrk:                   equ $33 ;port k direction
   51:          =00000034              Synr:           equ $34 ; synthesizer / multiplier register
   52:          =00000035              Refdv:          equ $35 ; reference divider register
   53:          =00000036              Ctflg:          equ $36 ; reserved
   54:          =00000037              Crgflg:         equ $37 ; pll flags register
   55:          =00000038              Crgint:         equ $38 ; pll interrupt register
   56:          =00000039              Clksel:         equ $39 ; clock select register
   57:          =0000003A              Pllctl:         equ $3a ; pll control register
   58:          =0000003B              Rtictl:         equ $3b ;real time interrupt control
   59:          =0000003C              Copctl:         equ $3c ;watchdog control
   60:          =0000003D              Forbyp:         equ $3d ;
   61:          =0000003E              Ctctl:          equ $3e ;
   62:          =0000003F              Armcop:         equ $3f ;cop reset register
   63:                                 
   64:          =00000040              Tios:           equ $40 ;timer input/output select
   65:          =00000041              Cforc:          equ $41 ;timer compare force
   66:          =00000042              Oc7m:           equ $42 ;timer output compare 7 mask
   67:          =00000043              Oc7d:           equ $43 ;timer output compare 7 data
   68:          =00000044              Tcnt:           equ $44 ;timer counter register hi
   69:                                 *Tcnt:          equ $45 ;timer counter register lo
   70:          =00000046              Tscr:           equ $46 ;timer system control register
   71:          =00000047              Ttov:           equ $47 ;reserved
   72:          =00000048              Tctl1:          equ $48 ;timer control register 1
   73:          =00000049              Tctl2:          equ $49 ;timer control register 2
   74:          =0000004A              Tctl3:          equ $4a ;timer control register 3
   75:          =0000004B              Tctl4:          equ $4b ;timer control register 4
   76:          =0000004C              Tmsk1:          equ $4c ;timer interrupt mask 1
   77:          =0000004D              Tmsk2:          equ $4d ;timer interrupt mask 2
   78:          =0000004E              Tflg1:          equ $4e ;timer flags 1
   79:          =0000004F              Tflg2:          equ $4f ;timer flags 2
   80:          =00000050              Tc0:            equ $50 ;timer capture/compare register 0
   81:          =00000052              Tc1:            equ $52 ;timer capture/compare register 1
   82:          =00000054              Tc2:            equ $54 ;timer capture/compare register 2
   83:          =00000056              Tc3:            equ $56 ;timer capture/compare register 3
   84:          =00000058              Tc4:            equ $58 ;timer capture/compare register 4
   85:          =0000005A              Tc5:            equ $5a ;timer capture/compare register 5
   86:          =0000005C              Tc6:            equ $5c ;timer capture/compare register 6
   87:          =0000005E              Tc7:            equ $5e ;timer capture/compare register 7
   88:          =00000060              Pactl:          equ $60 ;pulse accumulator controls
   89:          =00000061              Paflg:          equ $61 ;pulse accumulator flags
   90:          =00000062              Pacn3:          equ $62 ;pulse accumulator counter 3
   91:          =00000063              Pacn2:          equ $63 ;pulse accumulator counter 2
   92:          =00000064              Pacn1:          equ $64 ;pulse accumulator counter 1
   93:          =00000065              Pacn0:          equ $65 ;pulse accumulator counter 0
   94:          =00000066              Mcctl:          equ $66 ;modulus down conunter control
   95:          =00000067              Mcflg:          equ $67 ;down counter flags
   96:          =00000068              Icpar:          equ $68 ;input pulse accumulator control
   97:          =00000069              Dlyct:          equ $69 ;delay count to down counter
   98:          =0000006A              Icovw:          equ $6a ;input control overwrite register
   99:          =0000006B              Icsys:          equ $6b ;input control system control
  100:                                 
  101:          =0000006D              Timtst:         equ $6d ;timer test register
  102:                                 
  103:          =00000070              Pbctl:          equ $70 ; pulse accumulator b control
  104:          =00000071              Pbflg:          equ $71 ; pulse accumulator b flags
  105:          =00000072              Pa3h:           equ $72 ; pulse accumulator holding register 3
  106:          =00000073              Pa2h:           equ $73 ; pulse accumulator holding register 2
  107:          =00000074              Pa1h:           equ $74 ; pulse accumulator holding register 1
  108:          =00000075              Pa0h:           equ $75 ; pulse accumulator holding register 0
  109:          =00000076              Mccnt:          equ $76 ; modulus down counter register
  110:                                 *Mccntl:        equ $77 ; low byte
  111:          =00000078              Tcoh:           equ $78 ; capture 0 holding register
  112:          =0000007A              Tc1h:           equ $7a ; capture 1 holding register
  113:          =0000007C              Tc2h:           equ $7c ; capture 2 holding register
  114:          =0000007E              Tc3h:           equ $7e ; capture 3 holding register
  115:                                 
  116:          =00000080              Atd0ctl0:       equ $80 ;adc control 0 (reserved)
  117:          =00000081              Atd0ctl1:       equ $81 ;adc control 1 (reserved)
  118:          =00000082              Atd0ctl2:       equ $82 ;adc control 2
  119:          =00000083              Atd0ctl3:       equ $83 ;adc control 3
  120:          =00000084              Atd0ctl4:       equ $84 ;adc control 4
  121:          =00000085              Atd0ctl5:       equ $85 ;adc control 5
  122:          =00000086              Atd0stat:       equ $86 ;adc status register hi
  123:                                 *Atd0stat       equ $87 ;adc status register lo
  124:          =00000088              Atd0test:       equ $88 ;adc test (reserved)
  125:                                 *Atd0test       equ $89 ;
  126:                                 
  127:          =0000008D              Atd0dien:               equ $8d ;
  128:                                 
  129:          =0000008F              Portad0:         equ $8f ;port adc = input only
  130:          =00000090              Adr00h:         equ $90 ;adc result 0 register
  131:          =00000092              Adr01h:         equ $92 ;adc result 1 register
  132:          =00000094              Adr02h:         equ $94 ;adc result 2 register
  133:          =00000096              Adr03h:         equ $96 ;adc result 3 register
  134:          =00000098              Adr04h:         equ $98 ;adc result 4 register
  135:          =0000009A              Adr05h:         equ $9a ;adc result 5 register
  136:          =0000009C              Adr06h:         equ $9c ;adc result 6 register
  137:          =0000009E              Adr07h:         equ $9e ;adc result 7 register
  138:                                 
  139:          =000000A0              Pwme:                   equ $a0 ;pwm enable
  140:          =000000A1              Pwmpol:         equ $a1 ;pwm polarity
  141:          =000000A2              Pwmclk:         equ $a2 ;pwm clock select register
  142:          =000000A3              Pwmprclk:       equ $a3 ;pwm prescale clock select register
  143:          =000000A4              Pwmcae:         equ $a4 ;pwm center align select register
  144:          =000000A5              Pwmctl:         equ $a5 ;pwm control register
  145:          =000000A6              Pwmtst:         equ $a6 ;reserved
  146:          =000000A7              Pwmprsc:        equ $a7 ;reserved
  147:          =000000A8              Pwmscla:        equ $a8 ;pwm scale a
  148:          =000000A9              Pwmsclb:        equ $a9 ;pwm scale b
  149:          =000000AA              Pwmscnta:       equ $aa ;reserved
  150:          =000000AB              Pwmscntb:       equ $ab ;reserved
  151:          =000000AC              Pwmcnt0:        equ $ac ;pwm channel 0 counter
  152:          =000000AD              Pwmcnt1:        equ $ad ;pwm channel 1 counter
  153:          =000000AE              Pwmcnt2:        equ $ae ;pwm channel 2 counter
  154:          =000000AF              Pwmcnt3:        equ $af ;pwm channel 3 counter
  155:          =000000B0              Pwmcnt4:        equ $b0 ;pwm channel 4 counter
  156:          =000000B1              Pwmcnt5:        equ $b1 ;pwm channel 5 counter
  157:          =000000B2              Pwmcnt6:        equ $b2 ;pwm channel 6 counter
  158:          =000000B3              Pwmcnt7:        equ $b3 ;pwm channel 7 counter
  159:          =000000B4              Pwmper0:        equ $b4 ;pwm channel 0 period
  160:          =000000B5              Pwmper1:        equ $b5 ;pwm channel 1 period
  161:          =000000B6              Pwmper2:        equ $b6 ;pwm channel 2 period
  162:          =000000B7              Pwmper3:        equ $b7 ;pwm channel 3 period
  163:          =000000B8              Pwmper4:        equ $b8 ;pwm channel 4 period
  164:          =000000B9              Pwmper5:        equ $b9 ;pwm channel 5 period
  165:          =000000BA              Pwmper6:        equ $ba ;pwm channel 6 period
  166:          =000000BB              Pwmper7:        equ $bb ;pwm channel 7 period
  167:          =000000BC              Pwmdty0:        equ $bc ;pwm channel 0 duty cycle
  168:          =000000BD              Pwmdty1:        equ $bd ;pwm channel 1 duty cycle
  169:          =000000BE              Pwmdty2:        equ $be ;pwm channel 2 duty cycle
  170:          =000000BF              Pwmdty3:        equ $bf ;pwm channel 3 duty cycle
  171:          =000000C0              Pwmdty4:        equ $c0 ;pwm channel 0 duty cycle
  172:          =000000C1              Pwmdty5:        equ $c1 ;pwm channel 1 duty cycle
  173:          =000000C2              Pwmdty6:        equ $c2 ;pwm channel 2 duty cycle
  174:          =000000C3              Pwmdty7:        equ $c3 ;pwm channel 3 duty cycle
  175:          =000000C4              Pwmsdn:         equ $c4 ;pwm shutdown register
  176:                                 
  177:          =000000C8              Sc0bdh:         equ $c8 ;sci 0 baud reg hi byte
  178:          =000000C9              Sc0bdl:         equ $c9 ;sci 0 baud reg lo byte
  179:          =000000CA              Sc0cr1:         equ $ca ;sci 0 control1 reg
  180:          =000000CB              Sc0cr2:         equ $cb ;sci 0 control2 reg
  181:          =000000CC              Sc0sr1:         equ $cc ;sci 0 status reg 1
  182:          =000000CD              Sc0sr2:         equ $cd ;sci 0 status reg 2
  183:          =000000CE              Sc0drh:         equ $ce ;sci 0 data reg hi
  184:          =000000CF              Sc0drl:         equ $cf ;sci 0 data reg lo
  185:          =000000D0              Sc1bdh:         equ $d0 ;sci 1 baud reg hi byte
  186:          =000000D1              Sc1bdl:         equ $d1 ;sci 1 baud reg lo byte
  187:          =000000D2              Sc1cr1:         equ $d2 ;sci 1 control1 reg
  188:          =000000D3              Sc1cr2:         equ $d3 ;sci 1 control2 reg
  189:          =000000D4              Sc1sr1:         equ $d4 ;sci 1 status reg 1
  190:          =000000D5              Sc1sr2:         equ $d5 ;sci 1 status reg 2
  191:          =000000D6              Sc1drh:         equ $d6 ;sci 1 data reg hi
  192:          =000000D7              Sc1drl:         equ $d7 ;sci 1 data reg lo
  193:          =000000D8              Spi0cr1:        equ $d8 ;spi 0 control1 reg
  194:          =000000D9              Spi0cr2:        equ $d9 ;spi 0 control2 reg
  195:          =000000DA              Spi0br:         equ $da ;spi 0 baud reg
  196:          =000000DB              Spi0sr:         equ $db ;spi 0 status reg hi
  197:                                 
  198:          =000000DD              Sp0dr:          equ $dd ;spi 0 data reg
  199:                                 
  200:          =000000E0              Ibad:           equ $e0 ;i2c bus address register
  201:          =000000E1              Ibfd:           equ $e1 ;i2c bus frequency divider
  202:          =000000E2              Ibcr:           equ $e2 ;i2c bus control register
  203:          =000000E3              Ibsr:           equ $e3 ;i2c bus status register
  204:          =000000E4              Ibdr:           equ $e4 ;i2c bus message data register
  205:                                 
  206:          =000000E8              Dlcbcr1:        equ $e8 ;bdlc control regsiter 1
  207:          =000000E9              Dlcbsvr:        equ $e9 ;bdlc state vector register
  208:          =000000EA              Dlcbcr2:        equ $ea ;bdlc control register 2
  209:          =000000EB              Dlcbdr:         equ $eb ;bdlc data register
  210:          =000000EC              Dlcbard:        equ $ec ;bdlc analog delay register
  211:          =000000ED              Dlcbrsr:        equ $ed ;bdlc rate select register
  212:          =000000EE              Dlcscr:         equ $ee ;bdlc control register
  213:          =000000EF              Dlcbstat:       equ $ef ;bdlc status register
  214:          =000000F0              Spi1cr1:        equ $f0 ;spi 1 control1 reg
  215:          =000000F1              Spi1cr2:        equ $f1 ;spi 1 control2 reg
  216:          =000000F2              Spi1br:         equ $f2 ;spi 1 baud reg
  217:          =000000F3              Spi1sr:         equ $f3 ;spi 1 status reg hi
  218:                                 
  219:          =000000F5              Sp1dr:          equ $f5 ;spi 1 data reg
  220:                                 
  221:          =000000F8              Spi2cr1:        equ $f8 ;spi 2 control1 reg
  222:          =000000F9              Spi2cr2:        equ $f9 ;spi 2 control2 reg
  223:          =000000FA              Spi2br:         equ $fa ;spi 2 baud reg
  224:          =000000FB              Spi2sr:         equ $fb ;spi 2 status reg hi
  225:                                 
  226:          =000000FD              Sp2dr:          equ $fd ;spi 2 data reg
  227:                                 
  228:          =00000100              Fclkdiv:        equ $100 ;flash clock divider
  229:          =00000101              Fsec:           equ $101 ;flash security register
  230:                                 
  231:          =00000103              Fcnfg:          equ $103 ;flash configuration register
  232:          =00000104              Fprot:          equ $104 ;flash protection register
  233:          =00000105              Fstat:          equ $105 ;flash status register
  234:          =00000106              Fcmd:           equ $106 ;flash command register
  235:                                 
  236:          =00000110              Eclkdiv:        equ $110 ;eeprom clock divider
  237:                                 
  238:          =00000113              Ecnfg:          equ $113 ;eeprom configuration register
  239:          =00000114              Eprot:          equ $114 ;eeprom protection register
  240:          =00000115              Estat:          equ $115 ;eeprom status register
  241:          =00000116              Ecmd:           equ $116 ;eeprom command register
  242:                                 
  243:          =00000120              Atd1ctl0:       equ $120 ;adc1 control 0 (reserved)
  244:          =00000121              Atd1ctl1:       equ $121 ;adc1 control 1 (reserved)
  245:          =00000122              Atd1ctl2:       equ $122 ;adc1 control 2
  246:          =00000123              Atd1ctl3:       equ $123 ;adc1 control 3
  247:          =00000124              Atd1ctl4:       equ $124 ;adc1 control 4
  248:          =00000125              Atd1ctl5:       equ $125 ;adc1 control 5
  249:          =00000126              Atd1stat:       equ $126 ;adc1 status register hi
  250:                                 *Atd1stat       equ $127 ;adc1 status register lo
  251:          =00000128              Atd1test:       equ $128 ;adc1 test (reserved)
  252:                                 *Atd1test       equ $129 ;
  253:                                 
  254:          =0000012D              Atd1dien:       equ $12d ;adc1 input enable register
  255:                                 
  256:          =0000012F              Portad1:        equ $12f ;port adc1 = input only
  257:          =00000130              Adr10h:         equ $130 ;adc1 result 0 register
  258:          =00000132              Adr11h:         equ $132 ;adc1 result 1 register
  259:          =00000134              Adr12h:         equ $134 ;adc1 result 2 register
  260:          =00000136              Adr13h:         equ $136 ;adc1 result 3 register
  261:          =00000138              Adr14h:         equ $138 ;adc1 result 4 register
  262:          =0000013A              Adr15h:         equ $13a ;adc1 result 5 register
  263:          =0000013C              Adr16h:         equ $13c ;adc1 result 6 register
  264:          =0000013E              Adr17h:         equ $13e ;adc1 result 7 register
  265:          =00000140              Can0ctl0:       equ $140 ;can0 control register 0
  266:          =00000141              Can0ctl1:       equ $141 ;can0 control register 1
  267:          =00000142              Can0btr0:       equ $142 ;can0 bus timing register 0
  268:          =00000143              Can0btr1:       equ $143 ;can0 bus timing register 1
  269:          =00000144              Can0rflg:       equ $144 ;can0 receiver flags
  270:          =00000145              Can0rier:       equ $145 ;can0 receiver interrupt enables
  271:          =00000146              Can0tflg:       equ $146 ;can0 transmit flags
  272:          =00000147              Can0tier:       equ $147 ;can0 transmit interrupt enables
  273:          =00000148              Can0tarq:       equ $148 ;can0 transmit message abort control
  274:          =00000149              Can0taak:       equ $149 ;can0 transmit message abort status
  275:          =0000014A              Can0tbel:       equ $14a ;can0 transmit buffer select
  276:          =0000014B              Can0idac:       equ $14b ;can0 identfier acceptance control
  277:                                 
  278:          =0000014E              Can0rerr:       equ $14e ;can0 receive error counter
  279:          =0000014F              Can0terr:       equ $14f ;can0 transmit error counter
  280:          =00000150              Can0ida0:       equ $150 ;can0 identifier acceptance register 0
  281:          =00000151              Can0ida1:       equ $151 ;can0 identifier acceptance register 1
  282:          =00000152              Can0ida2:       equ $152 ;can0 identifier acceptance register 2
  283:          =00000153              Can0ida3:       equ $153 ;can0 identifier acceptance register 3
  284:          =00000154              Can0idm0:       equ $154 ;can0 identifier mask register 0
  285:          =00000155              Can0idm1:       equ $155 ;can0 identifier mask register 1
  286:          =00000156              Can0idm2:       equ $156 ;can0 identifier mask register 2
  287:          =00000157              Can0idm3:       equ $157 ;can0 identifier mask register 3
  288:          =00000158              Can0ida4:       equ $158 ;can0 identifier acceptance register 4
  289:          =00000159              Can0ida5:       equ $159 ;can0 identifier acceptance register 5
  290:          =0000015A              Can0ida6:       equ $15a ;can0 identifier acceptance register 6
  291:          =0000015B              Can0ida7:       equ $15b ;can0 identifier acceptance register 7
  292:          =0000015C              Can0idm4:       equ $15c ;can0 identifier mask register 4
  293:          =0000015D              Can0idm5:       equ $15d ;can0 identifier mask register 5
  294:          =0000015E              Can0idm6:       equ $15e ;can0 identifier mask register 6
  295:          =0000015F              Can0idm7:       equ $15f ;can0 identifier mask register 7
  296:          =00000160              Can0rxfg:       equ $160 ;can0 rx foreground buffer thru +$16f
  297:          =00000170              Can0txfg:       equ $170 ;can0 tx foreground buffer thru +$17f
  298:                                 
  299:          =00000180              Can1ctl0:       equ $180 ;can1 control register 0
  300:          =00000181              Can1ctl1:       equ $181 ;can1 control register 1
  301:          =00000182              Can1btr0:       equ $182 ;can1 bus timing register 0
  302:          =00000183              Can1btr1:       equ $183 ;can1 bus timing register 1
  303:          =00000184              Can1rflg:       equ $184 ;can1 receiver flags
  304:          =00000185              Can1rier:       equ $185 ;can1 receiver interrupt enables
  305:          =00000186              Can1tflg:       equ $186 ;can1 transmit flags
  306:          =00000187              Can1tier:       equ $187 ;can1 transmit interrupt enables
  307:          =00000188              Can1tarq:       equ $188 ;can1 transmit message abort control
  308:          =00000189              Can1taak:       equ $189 ;can1 transmit message abort status
  309:          =0000018A              Can1tbel:       equ $18a ;can1 transmit buffer select
  310:          =0000018B              Can1idac:       equ $18b ;can1 identfier acceptance control
  311:                                 
  312:          =0000018E              Can1rerr:       equ $18e ;can1 receive error counter
  313:          =0000018F              Can1terr:       equ $18f ;can1 transmit error counter
  314:          =00000190              Can1ida0:       equ $190 ;can1 identifier acceptance register 0
  315:          =00000191              Can1ida1:       equ $191 ;can1 identifier acceptance register 1
  316:          =00000192              Can1ida2:       equ $192 ;can1 identifier acceptance register 2
  317:          =00000193              Can1ida3:       equ $193 ;can1 identifier acceptance register 3
  318:          =00000194              Can1idm0:       equ $194 ;can1 identifier mask register 0
  319:          =00000195              Can1idm1:       equ $195 ;can1 identifier mask register 1
  320:          =00000196              Can1idm2:       equ $196 ;can1 identifier mask register 2
  321:          =00000197              Can1idm3:       equ $197 ;can1 identifier mask register 3
  322:          =00000198              Can1ida4:       equ $198 ;can1 identifier acceptance register 4
  323:          =00000199              Can1ida5:       equ $199 ;can1 identifier acceptance register 5
  324:          =0000019A              Can1ida6:       equ $19a ;can1 identifier acceptance register 6
  325:          =0000019B              Can1ida7:       equ $19b ;can1 identifier acceptance register 7
  326:          =0000019C              Can1idm4:       equ $19c ;can1 identifier mask register 4
  327:          =0000019D              Can1idm5:       equ $19d ;can1 identifier mask register 5
  328:          =0000019E              Can1idm6:       equ $19e ;can1 identifier mask register 6
  329:          =0000019F              Can1idm7:       equ $19f ;can1 identifier mask register 7
  330:          =000001A0              Can1rxfg:       equ $1a0 ;can1 rx foreground buffer thru +$1af
  331:          =000001B0              Can1txfg:       equ $1b0 ;can1 tx foreground buffer thru +$1bf
  332:                                 
  333:          =000001C0              Can2ctl0:       equ $1c0 ;can2 control register 0
  334:          =000001C1              Can2ctl1:       equ $1c1 ;can2 control register 1
  335:          =000001C2              Can2btr0:       equ $1c2 ;can2 bus timing register 0
  336:          =000001C3              Can2btr1:       equ $1c3 ;can2 bus timing register 1
  337:          =000001C4              Can2rflg:       equ $1c4 ;can2 receiver flags
  338:          =000001C5              Can2rier:       equ $1c5 ;can2 receiver interrupt enables
  339:          =000001C6              Can2tflg:       equ $1c6 ;can2 transmit flags
  340:          =000001C7              Can2tier:       equ $1c7 ;can2 transmit interrupt enables
  341:          =000001C8              Can2tarq:       equ $1c8 ;can2 transmit message abort control
  342:          =000001C9              Can2taak:       equ $1c9 ;can2 transmit message abort status
  343:          =000001CA              Can2tbel:       equ $1ca ;can2 transmit buffer select
  344:          =000001CB              Can2idac:       equ $1cb ;can2 identfier acceptance control
  345:                                 
  346:          =000001CE              Can2rerr:       equ $1ce ;can2 receive error counter
  347:          =000001CF              Can2terr:       equ $1cf ;can2 transmit error counter
  348:          =000001D0              Can2ida0:       equ $1d0 ;can2 identifier acceptance register 0
  349:          =000001D1              Can2ida1:       equ $1d1 ;can2 identifier acceptance register 1
  350:          =000001D2              Can2ida2:       equ $1d2 ;can2 identifier acceptance register 2
  351:          =000001D3              Can2ida3:       equ $1d3 ;can2 identifier acceptance register 3
  352:          =000001D4              Can2idm0:       equ $1d4 ;can2 identifier mask register 0
  353:          =000001D5              Can2idm1:       equ $1d5 ;can2 identifier mask register 1
  354:          =000001D6              Can2idm2:       equ $1d6 ;can2 identifier mask register 2
  355:          =000001D7              Can2idm3:       equ $1d7 ;can2 identifier mask register 3
  356:          =000001D8              Can2ida4:       equ $1d8 ;can2 identifier acceptance register 4
  357:          =000001D9              Can2ida5:       equ $1d9 ;can2 identifier acceptance register 5
  358:          =000001DA              Can2ida6:       equ $1da ;can2 identifier acceptance register 6
  359:          =000001DB              Can2ida7:       equ $1db ;can2 identifier acceptance register 7
  360:          =000001DC              Can2idm4:       equ $1dc ;can2 identifier mask register 4
  361:          =000001DD              Can2idm5:       equ $1dd ;can2 identifier mask register 5
  362:          =000001DE              Can2idm6:       equ $1de ;can2 identifier mask register 6
  363:          =000001DF              Can2idm7:       equ $1df ;can2 identifier mask register 7
  364:          =000001E0              Can2rxfg:       equ $1e0 ;can2 rx foreground buffer thru +$1ef
  365:          =000001F0              Can2txfg:       equ $1f0 ;can2 tx foreground buffer thru +$1ff
  366:                                 
  367:          =00000200              Can3ctl0:       equ $200 ;can3 control register 0
  368:          =00000201              Can3ctl1:       equ $201 ;can3 control register 1
  369:          =00000202              Can3btr0:       equ $202 ;can3 bus timing register 0
  370:          =00000203              Can3btr1:       equ $203 ;can3 bus timing register 1
  371:          =00000204              Can3rflg:       equ $204 ;can3 receiver flags
  372:          =00000205              Can3rier:       equ $205 ;can3 receiver interrupt enables
  373:          =00000206              Can3tflg:       equ $206 ;can3 transmit flags
  374:          =00000207              Can3tier:       equ $207 ;can3 transmit interrupt enables
  375:          =00000208              Can3tarq:       equ $208 ;can3 transmit message abort control
  376:          =00000209              Can3taak:       equ $209 ;can3 transmit message abort status
  377:          =0000020A              Can3tbel:       equ $20a ;can3 transmit buffer select
  378:          =0000020B              Can3idac:       equ $20b ;can3 identfier acceptance control
  379:                                 
  380:          =0000020E              Can3rerr:       equ $20e ;can3 receive error counter
  381:          =0000020F              Can3terr:       equ $20f ;can3 transmit error counter
  382:          =00000210              Can3ida0:       equ $210 ;can3 identifier acceptance register 0
  383:          =00000211              Can3ida1:       equ $211 ;can3 identifier acceptance register 1
  384:          =00000212              Can3ida2:       equ $212 ;can3 identifier acceptance register 2
  385:          =00000213              Can3ida3:       equ $213 ;can3 identifier acceptance register 3
  386:          =00000214              Can3idm0:       equ $214 ;can3 identifier mask register 0
  387:          =00000215              Can3idm1:       equ $215 ;can3 identifier mask register 1
  388:          =00000216              Can3idm2:       equ $216 ;can3 identifier mask register 2
  389:          =00000217              Can3idm3:       equ $217 ;can3 identifier mask register 3
  390:          =00000218              Can3ida4:       equ $218 ;can3 identifier acceptance register 4
  391:          =00000219              Can3ida5:       equ $219 ;can3 identifier acceptance register 5
  392:          =0000021A              Can3ida6:       equ $21a ;can3 identifier acceptance register 6
  393:          =0000021B              Can3ida7:       equ $21b ;can3 identifier acceptance register 7
  394:          =0000021C              Can3idm4:       equ $21c ;can3 identifier mask register 4
  395:          =0000021D              Can3idm5:       equ $21d ;can3 identifier mask register 5
  396:          =0000021E              Can3idm6:       equ $21e ;can3 identifier mask register 6
  397:          =0000021F              Can3idm7:       equ $21f ;can3 identifier mask register 7
  398:          =00000220              Can3rxfg:       equ $220 ;can3 rx foreground buffer thru +$22f
  399:          =00000230              Can3txfg:       equ $230 ;can3 tx foreground buffer thru +$23f
  400:                                 
  401:          =00000240              Ptt:            equ $240 ;portt data register
  402:          =00000241              Ptit:           equ $241 ;portt input register
  403:          =00000242              Ddrt:           equ $242 ;portt direction register
  404:          =00000243              Rdrt:           equ $243 ;portt reduced drive register
  405:          =00000244              Pert:           equ $244 ;portt pull device enable
  406:          =00000245              Ppst:           equ $245 ;portt pull polarity select
  407:                                 
  408:          =00000248              Pts:            equ $248 ;ports data register
  409:          =00000249              Ptis:           equ $249 ;ports input register
  410:          =0000024A              Ddrs:           equ $24a ;ports direction register
  411:          =0000024B              Rdrs:           equ $24b ;ports reduced drive register
  412:          =0000024C              Pers:           equ $24c ;ports pull device enable
  413:          =0000024D              Ppss:           equ $24d ;ports pull polarity select
  414:          =0000024E              Woms:           equ $24e ;ports wired or mode register
  415:                                 
  416:          =00000250              Ptm:            equ $250 ;portm data register
  417:          =00000251              Ptim:           equ $251 ;portm input register
  418:          =00000252              Ddrm:           equ $252 ;portm direction register
  419:          =00000253              Rdrm:           equ $253 ;portm reduced drive register
  420:          =00000254              Perm:           equ $254 ;portm pull device enable
  421:          =00000255              Ppsm:           equ $255 ;portm pull polarity select
  422:          =00000256              Womm:           equ $256 ;portm wired or mode register
  423:          =00000257              Modrr:          equ $257 ;portm module routing register
  424:          =00000258              Ptp:            equ $258 ;portp data register
  425:          =00000259              Ptip:           equ $259 ;portp input register
  426:          =0000025A              Ddrp:           equ $25a ;portp direction register
  427:          =0000025B              Rdrp:           equ $25b ;portp reduced drive register
  428:          =0000025C              Perp:           equ $25c ;portp pull device enable
  429:          =0000025D              Ppsp:           equ $25d ;portp pull polarity select
  430:          =0000025E              Piep:           equ $25e ;portp interrupt enable register
  431:          =0000025F              Pifp:           equ $25f ;portp interrupt flag register
  432:          =00000260              Pth:            equ $260 ;porth data register
  433:          =00000261              Ptih:           equ $261 ;porth input register
  434:          =00000262              Ddrh:           equ $262 ;porth direction register
  435:          =00000263              Rdrh:           equ $263 ;porth reduced drive register
  436:          =00000264              Perh:           equ $264 ;porth pull device enable
  437:          =00000265              Ppsh:           equ $265 ;porth pull polarity select
  438:          =00000266              Pieh:           equ $266 ;porth interrupt enable register
  439:          =00000267              Pifh:           equ $267 ;porth interrupt flag register
  440:          =00000268              Ptj:            equ $268 ;portp data register
  441:          =00000269              Ptij:           equ $269 ;portp input register
  442:          =0000026A              Ddrj:           equ $26a ;portp direction register
  443:          =0000026B              Rdrj:           equ $26b ;portp reduced drive register
  444:          =0000026C              Perj:           equ $26c ;portp pull device enable
  445:          =0000026D              Ppsj:           equ $26d ;portp pull polarity select
  446:          =0000026E              Piej:           equ $26e ;portp interrupt enable register
  447:          =0000026F              Pifj:           equ $26f ;portp interrupt flag register
  448:                                 
  449:          =00000280              Can4ctl0:       equ $280 ;can4 control register 0
  450:          =00000281              Can4ctl1:       equ $281 ;can4 control register 1
  451:          =00000282              Can4btr0:       equ $282 ;can4 bus timing register 0
  452:          =00000283              Can4btr1:       equ $283 ;can4 bus timing register 1
  453:          =00000284              Can4rflg:       equ $284 ;can4 receiver flags
  454:          =00000285              Can4rier:       equ $285 ;can4 receiver interrupt enables
  455:          =00000286              Can4tflg:       equ $286 ;can4 transmit flags
  456:          =00000287              Can4tier:       equ $287 ;can4 transmit interrupt enables
  457:          =00000288              Can4tarq:       equ $288 ;can4 transmit message abort control
  458:          =00000289              Can4taak:       equ $289 ;can4 transmit message abort status
  459:          =0000028A              Can4tbel:       equ $28a ;can4 transmit buffer select
  460:          =0000028B              Can4idac:       equ $28b ;can4 identfier acceptance control
  461:                                 
  462:          =0000028E              Can4rerr:       equ $28e ;can4 receive error counter
  463:          =0000028F              Can4terr:       equ $28f ;can4 transmit error counter
  464:          =00000290              Can4ida0:       equ $290 ;can4 identifier acceptance register 0
  465:          =00000291              Can4ida1:       equ $291 ;can4 identifier acceptance register 1
  466:          =00000292              Can4ida2:       equ $292 ;can4 identifier acceptance register 2
  467:          =00000293              Can4ida3:       equ $293 ;can4 identifier acceptance register 3
  468:          =00000294              Can4idm0:       equ $294 ;can4 identifier mask register 0
  469:          =00000295              Can4idm1:       equ $295 ;can4 identifier mask register 1
  470:          =00000296              Can4idm2:       equ $296 ;can4 identifier mask register 2
  471:          =00000297              Can4idm3:       equ $297 ;can4 identifier mask register 3
  472:          =00000298              Can4ida4:       equ $298 ;can4 identifier acceptance register 4
  473:          =00000299              Can4ida5:       equ $299 ;can4 identifier acceptance register 5
  474:          =0000029A              Can4ida6:       equ $29a ;can4 identifier acceptance register 6
  475:          =0000029B              Can4ida7:       equ $29b ;can4 identifier acceptance register 7
  476:          =0000029C              Can4idm4:       equ $29c ;can4 identifier mask register 4
  477:          =0000029D              Can4idm5:       equ $29d ;can4 identifier mask register 5
  478:          =0000029E              Can4idm6:       equ $29e ;can4 identifier mask register 6
  479:          =0000029F              Can4idm7:       equ $29f ;can4 identifier mask register 7
  480:          =000002A0              Can4rxfg:       equ $2a0 ;can4 rx foreground buffer thru +$2af
  481:          =000002B0              Can4txfg:       equ $2b0 ;can4 tx foreground buffer thru +$2bf
  482:                                 
  483:                                 * end registers
  484:                                 
  485:                                         endif   ; end of conditional assembly
   28:                                 
   29:                                 **************EQUATES**********
   30:                                 
   31:                                 
   32:                                 ;-----Conversion table
   33:          =00000010              NUMKEYS EQU     16      ; Number of keys on the keypad
   34:          =000000FF              BADCODE         EQU     $FF     ; returned of translation is unsuccessful
   35:          =00000000              NOKEY           EQU     $00   ; No key pressed during poll period
   36:          =00000001              POLLCOUNT       EQU     1     ; Number of loops to create 1 ms poll time
   37:          =00000000              COLS  EQU PORTA
   38:          =00000000              ROWS  EQU PORTA
   39:          =00000001              LED   EQU PORTB
   40:          =00000010              ROW0  EQU %00010000
   41:          =00000020              ROW1  EQU %00100000
   42:          =00000040              ROW2  EQU %01000000
   43:          =00000080              ROW3  EQU %10000000
   44:          =0000000F              COLM  EQU %00001111
   45:          =000000F0              ROWM  EQU %11110000
   46:                                 
   47:     0000 +0001                  PDELAY  RMB 1
   48:                                 
   49:     0001 31 32 33 41            KCODE0  FCB $31,$32,$33,$41    ;"123A"
   50:     0005 34 35 36 42            KCODE1  FCB $34,$35,$36,$42    ;"456B"
   51:     0009 37 38 39 43            KCODE2  FCB $37,$38,$39,$43    ;"789C"
   52:     000D 2A 30 23 44            KCODE3  FCB $2A,$30,$23,$44    ;"*0#D"
   53:                                  SWITCH globalConst  ; Constant data
   54:                                 
   55:                                 
   56:                                 
   57:                                  SWITCH code_section  ; place in code section
   58:                                 ;-----------------------------------------------------------    
   59:                                 ; Subroutine: initKeyPad
   60:                                 ;
   61:                                 ; Description: 
   62:                                 ;       Initiliases PORT A
   63:                                 ;-----------------------------------------------------------    
   64:     2000                        initKeyPad:        ;
   65:                                    ;STAA  DDRB         ;MAKE PORTB OUTPUT
   66:                                    ;lDAA  #$02         ;
   67:                                    ;STAA  DDRJ         ;ENABLE LED ARRAY ON PORTB OUTPUT
   68:                                    ;LDAA  #$00         ;
   69:                                    ;STAA  PTJ          ;
   70:     2000 79 0002                   CLR   DDRA
   71:     2003 86 FF                     LDAA  #$FF
   72:     2005 86 F0                     LDAA  #$F0         ;MAKE PORT A HIGH NIBLE OUTPUT
   73:     2007 5A 02                     STAA  DDRA         ;LOW NIBLE INPUT
   74:     2009 86 0F                     LDAA  #$0F         ;
   75:     200B 7A 025A                   STAA  DDRP
   76:                                 
   77:                                    ;STAA  PTP          ;TURN OFF 7SEG LED
   78:                                    ;LDAA  #$00         ;
   79:                                    ;STAA  PORTB        ;INITIALIZE PORT B
   80:                                 
   81:                                         
   82:     200E 3D                         rts
   83:                                 
   84:                                 ;-----------------------------------------------------------    
   85:                                 ; Subroutine: ch <- pollReadKey
   86:                                 ; Parameters: none
   87:                                 ; Local variable:
   88:                                 ; Returns
   89:                                 ;       ch: NOKEY when no key pressed,
   90:                                 ;       otherwise, ASCII Code in accumulator B
   91:                                 
   92:                                 ; Description:
   93:                                 ;  Loops for a period of 2ms, checking to see if
   94:                                 ;  key is pressed. Calls readKey to read key if keypress 
   95:                                 ;  detected (and debounced) on Port A and get ASCII code for
   96:                                 ;  key pressed.
   97:                                 ;-----------------------------------------------------------
   98:                                 ; Stack Usage
Z:\bmcdo020\Desktop\CEG3136\Lab2\keyPad.asm(99): Error A2026: col(8) mnemonic or pseudo command expected
   99:                                 OFFSET 0  ; to setup offset into stack
  100:                                 
  101:     200F                        pollReadKey:                  ;TEST TO MAKE SURE NO BUTTON PRESSED
  102:     200F 86 F0                     LDAA  #ROWM        ;
  103:     2011 5A 00                     STAA  ROWS         ;SET ROWS HIGH
  104:     2013 96 00                     LDAA  COLS         ;CAPTURE PORT A
  105:     2015 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  106:     2017 81 00                     CMPA  #$00         ;
  107:     2019 1826 FFF2                 LBNE  pollReadKey           ;IF COLUMS IS ZERO NO BUTTON PRESSED
  108:                                                       ;DO NOT MOVE ON UNTILL NO BUTTON IS PRESSED
  109:     201D                        debounce:
  110:     201D CC 0001                   LDD   #1                  ;
Z:\bmcdo020\Desktop\CEG3136\Lab2\keyPad.asm(111): Error A2038: col(17) 'delayms': undefined symbol
  111:                                    JSR   delayms      ;CALL 15mS DELAY
  112:     2020 96 00                     LDAA  COLS         ;
  113:     2022 84 0F                     ANDA  #COLM        ;
  114:     2024 81 00                     CMPA  #$00         ;IF COLS !=0 THEN A BUTTON IS PRESSED
  115:     2026 26 02                     BNE   OVER         ;
  116:     2028 20 F3                     BRA   debounce           ;IF NO BUTTON PRESSED KEEP CHECKING
  117:     202A                        OVER:                 ;
Z:\bmcdo020\Desktop\CEG3136\Lab2\keyPad.asm(118): Error A2038: col(17) 'delayms': undefined symbol
  118:                                    JSR   delayms      ;DEBOUCE DELAY
  119:     202A 96 00                     LDAA  COLS         ;READ PORT A
  120:     202C 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  121:     202E 81 00                     CMPA  #$00         ;CHECK FOR PRESS AFTER DEBOUNCE
  122:     2030 26 04                     BNE   OVER1        ;IF PRESSED GO FIND WHAT ROW
  123:     2032 1820 FFE7                 LBRA  debounce;IF NO PRESS AFTER DEBOUNCE GO BACK
  124:     2036                        OVER1:                ;
  125:     2036 86 10                     LDAA  #ROW0        ;MAKE HIGH ROW0 THE REST GROUNDED
  126:     2038 5A 00                     STAA  ROWS         ;
  127:     203A 180B 08 0000              MOVB  #$08,PDELAY  ;SET COUNT TO PROVIDE SHORT DELAY FOR STABILITY
  128:     203F 1820 DFBD                 LBRA readKey
  129:     2043 3D                        rts
  130:                                 
  131:                                 ;-----------------------------------------------------------    
  132:                                 ; Subroutine: ch <- readKey
  133:                                 ; Arguments: none
  134:                                 ; Local variable: 
  135:                                 ;       ch - ASCII Code in accumulator B
  136:                                 
  137:                                 ; Description:
  138:                                 ;  Main subroutine that reads a code from the
  139:                                 ;  keyboard using the subroutine readKeybrd.  The
  140:                                 ;  code is then translated with the subroutine
  141:                                 ;  translate to get the corresponding ASCII code.
  142:                                 ;-----------------------------------------------------------    
  143:                                 ; Stack Usage
  144:                                         OFFSET 0  ; to setup offset into stack
  145:                                 
  146:     0000                        readKey:                ;AFTER CHANGING THE PORT A OUTPUT
  147:     2044 73 0000                   DEC   PDELAY       ;DECREMENT COUNT
  148:     2047 1826 DFB5                 LBNE   readKey ;IF COUNT NOT ZERO KEEP DECREMENTING
  149:     204B 96 00                     LDAA  COLS         ;READ PORTA
  150:     204D 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  151:     204F 81 00                     CMPA  #$00         ;IS INPUT ZERO?
  152:     2051 26 46                     BNE   R0           ;IF COLUMS NOT ZERO THEN BUTTON IS IN ROW 0
  153:     2053 86 20                     LDAA  #ROW1        ;IF ZERO THEN BUTTON NOT IN ROW0
  154:     2055 5A 00                     STAA  ROWS         ;TURN ON ROW 1 TURN OFF ALL OTHERS
  155:     2057 180B 08 0000              MOVB  #$08,PDELAY  ;SHORT DELAY TO STABALIZE
  156:     205C                        P2:                   ;AFTER CHANGING THE PORT A OUTPUT
  157:     205C 73 0000                   DEC   PDELAY       ;DECREMENT COUNT
  158:     205F 26 FB                     BNE   P2           ;IF COUNT NOT ZERO KEEP DECREMENTING
  159:     2061 96 00                     LDAA  COLS         ;READ PORT A
  160:     2063 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  161:     2065 81 00                     CMPA  #$00         ;CHECK FOR KEY PRESS
  162:     2067 26 35                     BNE   R1           ;IF PRESSED KEY IS IN ROW1
  163:     2069 86 40                     LDAA  #ROW2        ;IF ZERO BUTTON NOT IN ROW1
  164:     206B 5A 00                     STAA  ROWS         ;TURN ON ROW2 ALL OTHERS OFF
  165:     206D 180B 08 0000              MOVB  #$08,PDELAY  ;SHORT DELAY TO STABALIZE PORTA
  166:     2072                        P3:                   ;
  167:     2072 73 0000                   DEC   PDELAY       ;DECREMENT COUNT
  168:     2075 26 FB                     BNE   P3           ;DELAY LOOP
  169:     2077 96 00                     LDAA  COLS         ;READ PORTA
  170:     2079 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  171:     207B 81 00                     CMPA  #$00         ;CHECK FOR PRESS
  172:     207D 26 24                     BNE   R2           ;IF FOUND KEY IS IN ROW2
  173:     207F 86 80                     LDAA  #ROW3        ;IF ZERO MOVE TO ROW3
  174:     2081 5A 00                     STAA  ROWS         ;TURN ON ROW3 ALL OTHERS OFF
  175:     2083 180B 08 0000              MOVB  #$08,PDELAY  ;SHORT DELAY TO STABALIZE OUTPUT
  176:     2088                        P4:                   ;
  177:     2088 73 0000                   DEC   PDELAY       ;DECREMENT DELAY
  178:     208B 26 FB                     BNE   P4           ;DELAY LOOP
  179:     208D 96 00                     LDAA  COLS         ;READ PORT A
  180:     208F 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  181:     2091 81 00                     CMPA  #$00         ;CHECK FOR PRESS
  182:     2093 26 13                     BNE   R3           ;IF FOUND KEY IN ROW3
  183:     2095 1820 FF84                 LBRA   debounce           ;IF ROW NOT FOUND GO BACK TO START
  184:     2099                        R0:                   ;
  185:     2099 CE 0001                   LDX   #KCODE0      ;LOAD PONTER TO ROW0 ARRAY
  186:     209C 20 0F                     BRA   FIND         ;GO FIND COLUMN
  187:     209E                        R1:                   ;
  188:     209E CE 0005                   LDX   #KCODE1      ;LOAD POINTER TO ROW1 ARRAY
  189:     20A1 20 0A                     BRA   FIND         ;GO FIND COUMN
  190:     20A3                        R2:                   ;
  191:     20A3 CE 0009                   LDX   #KCODE2      ;LOAD PINTER TO ROW2
  192:     20A6 20 05                     BRA   FIND         ;GO FIND COLUMN
  193:     20A8                        R3:                   ;
  194:     20A8 CE 000D                   LDX   #KCODE3      ;LOAD POINTER TO ROW3
  195:     20AB 20 00                     BRA   FIND         ;GO FIND COLUMN
  196:     20AD                        FIND:                 ;
  197:     20AD 84 0F                     ANDA  #COLM        ;MASK OUT ROWS
  198:     20AF 41                        COMA               ;INVERT COLUMN
  199:     20B0                        SHIFT:                ;
  200:     20B0 44                        LSRA               ;LOGICAL SHIFT RIGHT PORTA
  201:     20B1 24 03                     BCC   MATCH        ;IF CARY CLEAR COLUM IS FOUND
  202:     20B3 08                        INX                ;IF CARY NOT CLEAR INCREMENT POINTER TO ROW ARRAY
  203:     20B4 20 FA                     BRA   SHIFT        ;SHIFT RIGHT UNTIL CARY IS CLEAR.
  204:     20B6                        MATCH:                ;
  205:     20B6 E6 00                     LDAB  0,X          ;LOAD ASCII FROM ROW ARARAY    
  206:     20B8 3D                        rts                     ;  return(ch); 
  207:                                 

Symbols:
colm                            *0000000f
cols                            *00000000
ddra                            *00000002
ddrp                            *0000025a
debounce                        *0000201d
delayms                         ?00000000
endcode                         ?00000000
find                            *000020ad
kcode0                          *00000001
kcode1                          *00000005
kcode2                          *00000009
kcode3                          *0000000d
match                           *000020b6
over                            *0000202a
over1                           *00002036
p2                              *0000205c
p3                              *00002072
p4                              *00002088
pdelay                          *00000000
pollreadkey                     *0000200f
porta                           *00000000
portb                           *00000001
program                         *00002000
r0                              *00002099
r1                              *0000209e
r2                              *000020a3
r3                              *000020a8
readkey                         *00000000
row0                            *00000010
row1                            *00000020
row2                            *00000040
row3                            *00000080
rowm                            *000000f0
rows                            *00000000
shift                           *000020b0
variables                       *00003000

