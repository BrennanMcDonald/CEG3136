Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.lst - generated by MGTEK Assembler ASM12 V1.26 Build 144 for WIN32 (x86) - Mon Oct 16 14:10:10 2017

    1:                                 ;------------------------------------------------------
    2:                                 ; Alarm System Assembler Program
    3:                                 ; File: armed.asm
    4:                                 ; Description: The Armed Module
    5:                                 ; Author: Gilbert Arbez
    6:                                 ; Date: Fall 2010
    7:                                 ;------------------------------------------------------
    8:                                 
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(9): Error A2063: col(16) 'code_section': section not defined
    9:                                         SWITCH code_section
   10:          =00000BB8              ARMDELAY  equ 3000; 15000
   11:          =000003E8              BEEPDELAY equ 1000
   12:                                 
   13:                                 ;-------------------------------------------
   14:                                 ; Subroutine: enableAlarm
   15:                                 ; Parameters: none
   16:                                 ; Returns: nothing
   17:                                 ; Variables
   18:                                 ;       input, codeValid, delayFlag - on stack
   19:                                 ; Description:
   20:                                 ;     Gets user to enter a valid alarm code to arm
   21:                                 ;     the alarm system.  Delays 15 seconds (to allow user
   22:                                 ;     to leave; the alarm can be disarmed during this period),
   23:                                 ;     monitors for trigger events (a, b, c, d, e).  When 'a'
   24:                                 ;     is detected, 15 seconds are allowed to enter an alarm code to
   25:                                 ;     disarm the system; otherwise the alarm is triggered. For other
   26:                                 ;     trigger events, the alarm is triggered instantly.  The alarm
   27:                                 ;     system can be turned off after being triggered with an alarm
   28:                                 ;     code.
   29:                                 ;------------------------------------------------------
   30:                                 ; Stack Usage:
   31:                                         OFFSET 0  ; to setup offset into stack
   32:     0000 +0001                  EAL_INPUT      DS.B 1  ; input
   33:     0001 +0001                  EAL_CODEVALID  DS.B 1 ; codeValid
   34:     0002 +0001                  EAL_DELAYFLAG  DS.B 1 ; delayFlag
   35:     0003                        EAL_VARSIZE:
   36:     0003 +0002                  EAL_PR_D              DS.W 1 ; preserve D
   37:     0005 +0002                  EAL_RA         DS.W 1 ; return address
   38:                                 
   39:     0000 3B                     enableAlarm:  pshd
   40:     0001 1B 9D                     leas  -EAL_VARSIZE,SP        ;byte input;  // input from user
   41:                                                                 ;byte codeValid;  // valid alarm code found
   42:                                                                 ;byte delayFlag;
   43:                                    ;// Get a valid alarm code to arm the system
   44:     0003 CC 0125                   ldd #CODEMSG                 ; printf(CODEMSG);
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(45): Error A2038: col(15) 'printf': undefined symbol
   45:                                    jsr [printf, PCr]
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(46): Error A2038: col(15) 'false': undefined symbol
   46:                                    movb #FALSE,EAL_CODEVALID,SP ; codeValid = FALSE;
   47:     0006                        eal_while1:
   48:     0006 E7 81                     tst EAL_CODEVALID,SP         ; while(!codeValid) 
   49:     0008 26 0A                     bne eal_endwhile1            ; {
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(50): Error A2038: col(15) 'readkey': undefined symbol
   50:                                    jsr readKey                  ;   input = readKey();
   51:     000A 6B 80                     stab EAL_INPUT,SP
   52:     000C 180F                      tba
   53:     000E 17 90                     jsr checkCode                ;     codeValid = checkCode(input);
   54:     0010 6A 81                     staa EAL_CODEVALID,SP
   55:     0012 20 F2                     bra eal_while1
   56:     0014                        eal_endwhile1                   ; }
   57:                                 
   58:     0014 CC 012C                   ldd #ARMING                   ; printf(ARMING);
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(59): Error A2038: col(15) 'printf': undefined symbol
   59:                                    jsr [printf,PCr]
   60:                                    ; // Delay 1500 ms, i.e. 15 seconds
   61:     0017 CC 0BB8                   ldd #ARMDELAY                 ; setDelay(ARMDELAY);
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(62): Error A2038: col(16) 'setdelay': undefined symbol
   62:                                    jsr setDelay
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(63): Error A2038: col(15) 'false': undefined symbol
   63:                                    movb #FALSE,EAL_CODEVALID,SP ; codeValid = FALSE;
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(64): Error A2038: col(15) 'false': undefined symbol
   64:                                    movb #FALSE,EAL_DELAYFLAG,SP ; delayFlag = FALSE;
   65:     001A                        eal_while2:                     ; while(!delayFlag) 
   66:     001A E7 82                     tst EAL_DELAYFLAG,SP         ; {
   67:     001C 26 1A                     bne eal_endwhile2
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(68): Error A2038: col(17) 'polldelay': undefined symbol
   68:                                    jsr polldelay                ;   delayFlag = delay(); 
   69:     001E 6A 82                     staa EAL_DELAYFLAG,SP
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(70): Error A2038: col(19) 'pollreadkey': undefined symbol
   70:                                    jsr pollreadKey              ;   input = pollreadKey();  // check if code entered to disarm
   71:     0020 6B 80                     stab EAL_INPUT,SP
   72:     0022 180F                      tba
   73:     0024                        eal_if1:
   74:     0024 81 23                     cmpa #'#'                    ;   if(isdigit(input) || input == '#') 
   75:     0026 27 05                     beq eal_blk1
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(76): Error A2038: col(15) 'isdigit': undefined symbol
   76:                                    jsr isdigit
   77:     0028 97                        tsta
   78:     0029 26 02                     bne eal_blk1
   79:     002B 20 09                     bra eal_endif1   
   80:     002D                        eal_blk1:                       ;    {
   81:     002D A6 80                     ldaa EAL_INPUT,SP            
   82:     002F 17 90                     jsr checkCode                ;        codeValid = checkCode(input);
   83:     0031 6A 81                     staa EAL_CODEVALID,SP
   84:     0033                        eal_if2:
   85:     0033 97                        tsta                         ;        if(codeValid) 
   86:     0034 27 00                     beq eal_endif2
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(87): Error A2038: col(14) 'true': undefined symbol
   87:                                    movb #TRUE,EAL_DELAYFLAG,SP  ;            delayFlag = TRUE;  // break out of loop
   88:     0036                        eal_endif2:
   89:     0036                        eal_endif1:                     ;    }
   90:     0036 20 E2                     bra eal_while2               
   91:     0038                        eal_endwhile2                   ; }
   92:                                 
   93:                                    ;// Loop to monitor trigger events and alarm code to disable
   94:                                    ;// codeValid is TRUE if valid alarm code entered during delay
   95:     0038                        eal_if3:                        ; if(!codeValid)
   96:     0038 E7 81                     tst EAL_CODEVALID,SP
   97:     003A 26 03                     bne eal_endif3
   98:     003C CC 013D                   ldd #ARMED                   ;        printf(ARMED)
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(99): Error A2038: col(15) 'printf': undefined symbol
   99:                                    jsr [printf, PCr]
  100:     003F                        eal_endif3:
  101:     003F                        eal_while3                      ;  while(!codeValid)
  102:     003F E7 81                     tst EAL_CODEVALID,SP         ; {
  103:     0041 26 49                     bne eal_endwhile3
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(104): Error A2038: col(19) 'pollreadkey': undefined symbol
  104:                                    jsr pollReadKey              ;    input = pollReadKey();
  105:     0043 6B 80                     stab EAL_INPUT,SP
  106:     0045 180F                      tba
  107:     0047                        eal_elseif
  108:     0047 81 23                     cmpa #'#'                    ;    if(isdigit(input) || input == '#') 
  109:     0049 27 05                     beq eal_blk2
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(110): Error A2038: col(15) 'isdigit': undefined symbol
  110:                                    jsr isdigit
  111:     004B 97                        tsta
  112:     004C 26 02                     bne eal_blk2
  113:     004E 20 08                     bra eal_elseifA  
  114:     0050                        eal_blk2:      
  115:     0050 A6 80                     ldaa EAL_INPUT,SP             ;        codeValid = checkCode(input);
  116:     0052 07 3C                     bsr checkCode                
  117:     0054 6A 81                     staa EAL_CODEVALID,SP 
  118:     0056 20 32                     bra eal_endelseif    
  119:     0058                        eal_elseifA:
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(120): Error A2038: col(19) 'getswstatus': undefined symbol
  120:                                    jsr getSwStatus               ;   else if(getSwStatus() & 0b00000001) // Front door opened
  121:     0058 84 01                     anda #%00000001
  122:     005A 27 28                     beq eal_elseifB               ;   {
  123:     005C CC 014D                   ldd #DISARMING                ;      printf(DISARMING);
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(124): Error A2038: col(15) 'printf': undefined symbol
  124:                                    jsr [printf, PCr]
  125:     005F CC 0BB8                   ldd #ARMDELAY                 ;      setDelay(ARMDELAY);
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(126): Error A2038: col(16) 'setdelay': undefined symbol
  126:                                    jsr setDelay
  127:     0062                        eal_while4:                      ;      while(!codeValid)
  128:     0062 A6 81                     ldaa EAL_CODEVALID,SP         ;      {
  129:     0064 26 1C                     bne eal_endwhile4 
  130:     0066                        eal_if4:
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(131): Error A2038: col(17) 'polldelay': undefined symbol
  131:                                    jsr pollDelay                 ;         if(pollDelay())
  132:     0066 97                        tsta  
  133:     0067 27 04                     beq eal_else4                 ;         { 
  134:     0069 17 F9                     jsr triggerAlarm              ;            triggerAlarm();
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(135): Error A2038: col(14) 'true': undefined symbol
  135:                                    movb #TRUE,EAL_CODEVALID,SP   ;            codeValid = TRUE;           
  136:     006B 20 13                     bra eal_endif4                ;         }
  137:     006D                        eal_else4                        ;         else {
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(138): Error A2038: col(19) 'pollreadkey': undefined symbol
  138:                                    jsr pollReadKey               ;            input = pollReadKey();  // check if alarm code entered to disarm
  139:     006D 6B 80                     stab EAL_INPUT,SP
  140:     006F                        eal_if5:
  141:     006F 180F                      tba                           ;            if(isdigit(input) || input == '#')
  142:     0071 81 23                     cmpa #'#' 
  143:     0073 27 05                     beq eal_blk3
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(144): Error A2038: col(15) 'isdigit': undefined symbol
  144:                                    jsr isdigit
  145:     0075 97                        tsta
  146:     0076 26 02                     bne eal_blk3
  147:     0078 20 06                     bra eal_endif5   
  148:     007A                        eal_blk3:  
  149:     007A A6 80                     ldaa EAL_INPUT,SP
  150:     007C 07 12                     bsr checkCode                ;                 codeValid = checkCode(input);
  151:     007E 6A 81                     staa EAL_CODEVALID,SP 
  152:     0080                        eal_endif5:
  153:     0080                        eal_endif4:                     ;          }
  154:     0080 20 E0                     bra eal_while4
  155:     0082                        eal_endwhile4:                  ;        }
  156:     0082                        eal_endelseifA                  ;      }
  157:     0082 20 06                     bra eal_endelseif;      
  158:     0084                        eal_elseifB:
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(159): Error A2038: col(19) 'getswstatus': undefined symbol
  159:                                    jsr getSwStatus              ;      else if(getSwStatus() & 0b11111110) // other door/window opened
  160:     0084 84 FE                     anda #%11111110              ;      
  161:     0086 27 02                     beq eal_endelseifB           ;      {
  162:     0088 17 F9                     jsr triggerAlarm             ;          triggerAlarm();
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(163): Error A2038: col(14) 'true': undefined symbol
  163:                                    movb #TRUE,EAL_CODEVALID,SP  ;          codeValid = TRUE;
  164:     008A                        eal_endelseifB:                 ;      }
  165:                                    ;    // ignore all other input
  166:     008A                        eal_endelseif:
  167:     008A 20 B3                      bra eal_while3
  168:     008C                        eal_endwhile3                   ; }
  169:     008C 1B 83                      leas EAL_VARSIZE,SP
  170:     008E 3A                         puld
  171:     008F 3D                         rts
  172:                                 
  173:                                 
  174:                                 ;------------------------------------------------------
  175:                                 ; Subroutine: checkCode
  176:                                 ; Parameters: input - accumulator A
  177:                                 ; Returns: TRUE when a valid alarm code is detected, FALSE otherwise - stored in 
  178:                                 ;          accumulator A
  179:                                 ; Local Variables: retval - on stack
  180:                                 ; Global Variables:
  181:                                 ;       mult - initilased to 1000 in inithw (Alarm System Module)
  182:                                 ;       alarmCode - initialised to 0 in inithw (Alarm System Module)
  183:                                 ; Descriptions: Creates alarm code using digits entered until
  184:                                 ;               4 digits are seen. After 4th digit, see if
  185:                                 ;               alarm code is valid using isCodeValid().
  186:                                 ;------------------------------------------------------
  187:                                 ; Stack usage
  188:                                         OFFSET 0
  189:     0000 +0001                  CKC_INPUT  DS.B 1 ; parameter input
  190:     0001 +0001                  CKC_RETVAL DS.B 1 ; variable retval
  191:     0002                        CKC_VARSIZE
  192:     0002 +0001                  CKC_PR_B          DS.B 1 ; preserve B
  193:     0003 +0002                  CKC_PR_X   DS.W 1 ; preserve X
  194:     0005 +0002                  CKC_PR_Y   DS.W 1 ; preserve Y
  195:     0007 +0002                  CKC_RA    DS.W 1 ; return address
  196:                                 
  197:     0090 35                     checkCode: pshy
  198:     0091 34                        pshx
  199:     0092 37                        pshb
  200:     0093 1B 9E                     leas -CKC_VARSIZE,SP       
  201:                                                               ; static int mult = 1000; // current multiplier of digit
  202:                                                               ; static int alarmCode = 0;   // alarm code value
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(203): Error A2038: col(15) 'false': undefined symbol
  203:                                    movb #FALSE,CKC_RETVAL,SP  ; byte retval = FALSE;
  204:     0095 6A 80                     staa CKC_INPUT,SP          ; save paramater value
  205:                                    
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(206): Error A2038: col(15) 'isdigit': undefined symbol
  206:                                    jsr isdigit                ; if(isdigit(input))
  207:     0097 97                        tsta
  208:     0098 27 34                     beq ckc_else               ; {
  209:     009A A6 80                     ldaa CKC_INPUT,SP          ;    alarmCode = alarmCode + (input-ASCII_CONV_NUM)*mult
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(210): Error A2038: col(24) 'ascii_conv_num': undefined symbol
  210:                                    suba #ASCII_CONV_NUM
  211:     009C 180E                      tab                        
  212:     009E 87                        clra
  213:     009F FD 015F                   ldy mult
  214:     00A2 13                        emul                       ; //*mult - result in D
  215:     00A3 F3 0161                   addd alarmCode
  216:     00A6 7C 0161                   std alarmCode
  217:     00A9 FC 015F                   ldd mult                   ;    mult = mult/10;
  218:     00AC CE 000A                   ldx #10
  219:     00AF 1810                      idiv
  220:     00B1 7E 015F                   stx mult
  221:     00B4 FC 015F                   ldd mult                   ;    if(mult == 0) 
  222:     00B7 26 13                     bne ckc_endif1             ;    {
  223:     00B9 FC 0161                   ldd alarmcode              ;
  224:     00BC 07 24                     bsr isCodeValid            ;       retval = isCodeValid(alarmCode);
  225:     00BE 6A 81                     staa CKC_RETVAL,SP
  226:     00C0 CC 0000                   ldd #0                     ;       alarmCode = 0;
  227:     00C3 7C 0161                   std alarmCode 
  228:     00C6 CC 03E8                   ldd #1000                  ;       mult = 1000;
  229:     00C9 7C 015F                   std mult     
  230:     00CC                        ckc_endif1:                   ;     }
  231:     00CC 20 0C                     bra ckc_endif              ; }
  232:     00CE                        ckc_else:                     ; else {
  233:     00CE CC 0000                   ldd #0                     ;       alarmCode = 0;
  234:     00D1 7C 0161                   std alarmCode 
  235:     00D4 CC 03E8                   ldd #1000                  ;       mult = 1000;
  236:     00D7 7C 015F                   std mult                   ; }
  237:     00DA                        ckc_endif:
  238:                                    
  239:     00DA A6 81                     ldaa CKC_RETVAL,SP         ; return(retval);
  240:                                    ; Restore registers and stack
  241:     00DC 1B 82                     leas CKC_VARSIZE,SP
  242:     00DE 33                        pulb
  243:     00DF 30                        pulx
  244:     00E0 31                        puly
  245:     00E1 3D                        rts      
  246:                                 
  247:                                 
  248:                                 ;------------------------------------------------------
  249:                                 ; Subroutine: isCodeValid
  250:                                 ; Parameters: alarmCode stored in register D
  251:                                 ; Local Variables
  252:                                 ;   ptr - pointer to array - in register X
  253:                                 ;   cnt, retval - on the stack.
  254:                                 ; Returns: TRUE/FALSE - Returned in accumulator A 
  255:                                 ; Description: Checks to see if alarm code is in the
  256:                                 ;              alarmCodes array.
  257:                                 ;------------------------------------------------------
  258:                                 
  259:                                 ; Stack usage
  260:                                         OFFSET 0
  261:     0000 +0002                  CDV_ALARMCODE   DS.W 1 ; alarmCode
  262:     0002 +0001                  CDV_CNT    DS.B 1 ; cnt
  263:     0003 +0001                  CDV_RETVAL DS.B 1 ; retval
  264:     0004                        CDV_VARSIZE:
  265:     0004 +0002                  CDV_PR_X   DS.W 1 ; preserve x register
  266:     0006 +0002                  CDV_RA     DS.W 1 ; return address
  267:                                 
  268:     00E2 34                     isCodeValid: pshx
  269:     00E3 1B 9C                     leas -CDV_VARSIZE,SP
  270:     00E5 6C 80                     std CDV_ALARMCODE,SP
  271:                                    ; int *ptr;  // pointer to alarmCodes
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(272): Error A2038: col(18) 'numcodes': undefined symbol
  272:                                    movb #NUMCODES,CDV_CNT,SP ; byte cnt = 5;
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(273): Error A2038: col(15) 'false': undefined symbol
  273:                                    movb #FALSE,CDV_RETVAL,SP ; byte retval = FALSE;
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(274): Error A2038: col(19) 'alarmcodes': undefined symbol
  274:                                    ldx #alarmCodes           ; ptr = alarmCodes;
  275:     00E7                        cdv_while                    ; do
  276:     00E7 EC 31                     ldd 2,X+                  ; {
  277:     00E9 AC 80                     cpd CDV_ALARMCODE,SP      ;    if(*ptr++ == alarmCode)
  278:     00EB 26 02                     bne cdv_endif             ;    {
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(279): Error A2038: col(14) 'true': undefined symbol
  279:                                    movb #TRUE,CDV_RETVAL,SP  ;      retval = TRUE;
  280:     00ED 20 04                     bra cdv_endwhile          ;      break;
  281:     00EF                        cdv_endif:                   ;    }
  282:     00EF 63 82                     dec CDV_CNT,SP            ;   cnt--;
  283:     00F1 26 F4                     bne cdv_while             ; } while(cnt != 0); 
  284:     00F3                        cdv_endwhile:
  285:     00F3 A6 83                     ldaa CDV_RETVAL,SP         ;   return(retval);
  286:                                    ; restore registers and stack
  287:     00F5 1B 84                     leas CDV_VARSIZE,SP 
  288:     00F7 30                        pulx
  289:     00F8 3D                        rts
  290:                                 
  291:                                 ;----------------------------
  292:                                 ; Subroutine: triggerAlarm
  293:                                 ; Parameters: none
  294:                                 ; Returns: nothing
  295:                                 ; Local Variables: retval, dobel, input - on stack
  296:                                 ; Description: Repeatedly sends a bel character to the
  297:                                 ;              terminal until a valid alarm code is entered.
  298:                                 ;----------------------------
  299:                                 ; Stack usage
  300:                                         OFFSET 0
  301:     0000 +0002                  TRA_DONE   DS.W 1 ; done
  302:     0002 +0001                  TRA_DONEINPUT  DS.B 1 ; doneInput
  303:     0003 +0001                  TRA_INPUT  DS.B 1 ; input
  304:     0004                        TRA_VARSIZE:
  305:     0004 +0002                  TRA_PR_D   DS.W 1 ; preserve D register
  306:     0006 +0002                  TRA_RA     DS.W 1 ; return address
  307:                                 
  308:     00F9 3B                     triggerAlarm: pshd
  309:     00FA 1B 9C                     leas -TRA_VARSIZE,SP
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(310): Error A2038: col(15) 'false': undefined symbol
  310:                                    movb #FALSE,TRA_DONE,SP   ; byte done = FALSE;
  311:                                                              ; byte dobel;
  312:                                                              ; byte input;
  313:     00FC                        tra_while:                   ; while(!done)
  314:     00FC E7 80                     tst TRA_DONE,SP         ; {
  315:     00FE 26 21                     bne tra_endwhile
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(316): Error A2038: col(12) 'bel': undefined symbol
  316:                                    ldb #BEL                  ;    putchar(BEL);
  317:     0100 87                        clra
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(318): Error A2038: col(16) 'putchar': undefined symbol
  318:                                    jsr [putchar, PCr]
  319:     0101 CC 03E8                   ldd #BEEPDELAY            ;    setDelay(BEEPDELAY);   // 1 sec between beeps
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(320): Error A2038: col(16) 'setdelay': undefined symbol
  320:                                    jsr setDelay
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(321): Error A2038: col(15) 'false': undefined symbol
  321:                                    movb #FALSE,TRA_DONEINPUT,SP ; doneInput = FALSE;
  322:     0104                        tra_while2:                  ;    while(!doneInput) 
  323:     0104 E7 82                     tst TRA_DONEINPUT,SP      ;    {
  324:     0106 26 17                     bne tra_endwhile2
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(325): Error A2038: col(17) 'polldelay': undefined symbol
  325:                                    jsr polldelay             ;       doneInput = delay();
  326:     0108 6A 82                     staa TRA_DONEINPUT,SP
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(327): Error A2038: col(19) 'pollreadkey': undefined symbol
  327:                                    jsr pollReadKey           ;       input = pollReadKey();  // check if code entered to disarm
  328:     010A 6B 83                     stab TRA_INPUT,SP
  329:     010C 180F                      tba
  330:     010E 81 23                     cmpa #'#'                 ;       if(isdigit(input) || input == '#') 
  331:     0110 27 05                     beq tra_blk1
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(332): Error A2038: col(15) 'isdigit': undefined symbol
  332:                                    jsr isdigit
  333:     0112 97                        tsta
  334:     0113 26 02                     bne tra_blk1
  335:     0115 20 06                     bra tra_endif   
  336:     0117                        tra_blk1:
  337:     0117 A6 83                     ldaa TRA_INPUT,SP
  338:     0119 17 90                     jsr checkCode             ;                done = checkCode(input);
  339:     011B 6A 80                     staa TRA_DONE,SP 
  340:     011D                        tra_endif: 
  341:     011D 20 E5                     bra tra_while2
  342:     011F                        tra_endwhile2                ;    }
  343:     011F 20 DB                     bra tra_while
  344:     0121                        tra_endwhile                 ; }
  345:     0121 1B 84                     leas TRA_VARSIZE,SP
  346:     0123 3A                        puld
  347:     0124 3D                        rts
  348:                                 
  349:                                 ;-------------------------------------------------------------------------
  350:                                 ; Data Structures
  351:                                 ;-------------------------------------------------------------------------
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(352): Error A2063: col(9) 'globalconst': section not defined
  352:                                         SWITCH globalConst
  353:                                 ; Message strings
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(354): Error A2038: col(24) 'nl': undefined symbol
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(354): Error A2038: col(27) 'cr': undefined symbol
  354:     0125 43 6F 64 65 00 00      CODEMSG dc.b  "Code",NL,CR,$00
           012B 00 
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(355): Error A2038: col(34) 'nl': undefined symbol
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(355): Error A2038: col(37) 'cr': undefined symbol
  355:     012C 2A 2A 2A 20 41 72      ARMING  dc.b  "*** Arming ***",NL,CR,$00
           0132 6D 69 6E 67 20 2A 
           0138 2A 2A 00 00 00 
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(356): Error A2038: col(31) 'nl': undefined symbol
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(356): Error A2038: col(34) 'cr': undefined symbol
  356:     013D 2A 2A 2A 20 41 72      ARMED   dc.b  "*** Armed ***",NL,CR,$00
           0143 6D 65 64 20 2A 2A 
           0149 2A 00 00 00 
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(357): Error A2038: col(37) 'nl': undefined symbol
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(357): Error A2038: col(40) 'cr': undefined symbol
  357:     014D 2D 2D 20 44 69 73      DISARMING dc.b  "-- Disarming --",NL,CR,$00
           0153 61 72 6D 69 6E 67 
           0159 20 2D 2D 00 00 00 
  358:                                 
Z:\bmcdo020\Desktop\CEG3136\Lab2\armed.asm(359): Error A2063: col(11) 'globalvar': section not defined
  359:                                    switch globalVar
  360:     015F 03E8                   mult dc.w 1000
  361:     0161 0000                   alarmCode dc.w 0

Symbols:
alarmcode                       *00000161
alarmcodes                      ?00000000
armdelay                        *00000bb8
armed                           *0000013d
arming                          *0000012c
ascii_conv_num                  ?00000000
beepdelay                       *000003e8
bel                             ?00000000
cdv_alarmcode                   *00000000
cdv_cnt                         *00000002
cdv_endif                       *000000ef
cdv_endwhile                    *000000f3
cdv_retval                      *00000003
cdv_varsize                     *00000004
cdv_while                       *000000e7
checkcode                       *00000090
ckc_else                        *000000ce
ckc_endif                       *000000da
ckc_endif1                      *000000cc
ckc_input                       *00000000
ckc_retval                      *00000001
ckc_varsize                     *00000002
codemsg                         *00000125
cr                              ?00000000
disarming                       *0000014d
eal_blk1                        *0000002d
eal_blk2                        *00000050
eal_blk3                        *0000007a
eal_codevalid                   *00000001
eal_delayflag                   *00000002
eal_else4                       *0000006d
eal_elseifa                     *00000058
eal_elseifb                     *00000084
eal_endelseif                   *0000008a
eal_endelseifb                  *0000008a
eal_endif1                      *00000036
eal_endif2                      *00000036
eal_endif3                      *0000003f
eal_endif4                      *00000080
eal_endif5                      *00000080
eal_endwhile1                   *00000014
eal_endwhile2                   *00000038
eal_endwhile3                   *0000008c
eal_endwhile4                   *00000082
eal_input                       *00000000
eal_varsize                     *00000003
eal_while1                      *00000006
eal_while2                      *0000001a
eal_while3                      *0000003f
eal_while4                      *00000062
false                           ?00000000
getswstatus                     ?00000000
iscodevalid                     *000000e2
isdigit                         ?00000000
mult                            *0000015f
nl                              ?00000000
numcodes                        ?00000000
polldelay                       ?00000000
pollreadkey                     ?00000000
printf                          ?00000000
putchar                         ?00000000
readkey                         ?00000000
setdelay                        ?00000000
tra_blk1                        *00000117
tra_done                        *00000000
tra_doneinput                   *00000002
tra_endif                       *0000011d
tra_endwhile                    *00000121
tra_endwhile2                   *0000011f
tra_input                       *00000003
tra_varsize                     *00000004
tra_while                       *000000fc
tra_while2                      *00000104
triggeralarm                    *000000f9
true                            ?00000000

